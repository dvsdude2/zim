Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2021-08-21T20:59:36-06:00

====== snippets command config üåê ======
Created Saturday 21 August 2021
üåê

== Paste in insert mode?#1 ==
No not directly. What you can do though is quickly exit insert mode for a single normal mode operation with Ctrl-O and then paste from there which will end by putting you back in insert mode.

Key Combo: Ctrl-O p

== Paste in insert mode?#2 ==
While in insert mode hit CTRL-R {register}

Examples:
CTRL-R * will insert in the contents of the clipboard
CTRL-R " (the unnamed register) inserts the last delete or yank.
To find this in vim's help type :h i_ctrl-r

== should keep cursor from bttm line when moving ==
[x] set so=7                   " Keep 7 lines visible when scrolling
set wmh=0                   " allow window to be 0 lines high

==== =possable keybinding that will copy entire buffer/file ====

Normal Mode
gg"*yG
gg"+yG

:set go+=a
ggVG
ggVGy

== - keybinding for normal mode ==

:%y without + works over the entire system if you are using neo-vim (nvim).
This lets us avoid stretching our fingers to the + - acctually making this shortcut better than ggyG

then >__:nnoremap <leader><whatever> :%y__  

here is anouther example

__nnoremap yY :%yank <c-r>=v:register<cr><cr>__
					 or

== - while in visual you can punch in ==
VggoG"+y

== - or you could set ==
:set go+=a
VggoG


== Edit another file in the same directory as the current file ==
" Uses expression to extract path from current file's path
map <Leader>e :e <C-R>=expand("%:p:h") . '/'<CR>
map <Leader>s :split <C-R>=expand("%:p:h") . '/'<CR>
map <Leader>v :vnew <C-R>=expand("%:p:h") . '/'<CR>




let mapleader = ","
nmap <leader>f :find<cr>
[x] map <leader>s :source ~/.vimrc<cr>
set backspace=eol,start,indent
~~"Set magic on~~
~~set magic~~
"Basically you press * or # to search for the current selection !! Really useful
vnoremap <silent> * :call VisualSearch('f')<CR>
vnoremap <silent> # :call VisualSearch('b')<CR>

== To confirm each substitution, use the c flag: ==
:s/foo/bar/gc
"__:s__ //ubstatute "__/__"=find __foo__ replace with __bar__ __g __lobly and __c __onfirm each one//

Examples:
**Comment lines (add # before the line) from 5 to 20:**
:5,20s/^/#/

**Uncomment lines from 5 to 20, revert the previous changes:**
:5,20s/^#//

**Replace all instances of ‚Äòapple‚Äô, ‚Äòorange‚Äô, and ‚Äòmango‚Äô with ‚Äòfruit‚Äô:**
:%s/apple\|orange\|mango/fruit/g

**Remove trailing whitespace at the end of each line:**
:%s/\s\+$//e

[x] move vertically by visual line (don't skip wrapped lines)
[]nmap j gj
nmap k gk

~~" Configure backspace so it acts as it should act~~
~~set backspace=eol,start,indent~~
~~set whichwrap+=<,>,h,l~~
"""""""""""""""""""""""""""""
" => Visual mode related
""""""""""""""""""""""""""""""
" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>

== Quickly open a buffer for scribble ==
map <leader>q :e ~/buffer<cr>
üåê

== Vim search and replace selected text ==
Try execute the following or put in into your .vimrc
üåê
[x] vnoremap <C-r> "hy:%s/<C-r>h//gc<left><left><left>
By pressing ctrl+r in visual mode, you will be prompted to enter text to replace with. Press enter and then confirm each change you agree with y or decline with n.

This command will override your register h so you can choose other one (by changing h in the command above to another lower case letter) that you don't use.

=== Spell checking ===
See vimcast #19 as an introduction: http://vimcasts.org/episodes/spell-checking/

Assuming that you have the following in .vimrc:

nnoremap <silent> <leader>s :set spell!<cr>
<leader>s Toggle Spelling
]s       Next spelling mistake
[s       Previous spelling mistake
z=       Give Suggestions (prepent 1, use first suggestions automatically)
zg       Add misspelled to spellfile
zug      Remove word from spellfile


=== jump to end of line while in Insert Mode ===

C-e
inoremap <C-e> <C-o>$

inoremap maps a key combination for insert mode
<C-e> is the keybinding I am creating.
<C-o> is a command that switches vim to normal mode for one command.
$ jumps to the end of the line and we are switched back to insert mode.
C-a

This keybinding allows you to instead jump to beginning of a line while in insert mode.
inoremap <C-a> <C-o>0

=== *Using inoremap instead of imap ===
These keybindings could also be written using imap instead of inoremap. The difference between the two commands, is that inoremap is non-recursive. So if somewhere in your .vimrc or a plugin C-o is remapped with:

imap <C-o> <esc>O
Then the above remappings of <C-e> (with imap) would be changed also and no longer work. So in general it is best to remap with the nore (non-recursive) versions:
noremap nnoremap inoremap vnoremap


=== Key sequences ===
Replace a word in a number of occurrences with 'bar'; use word under cursor (* or /foo)
__ ' * cw bar ESC n . '__

'*' word under cursor 'foo'
cw    change word (enter insert mode)
bar   typed new word 'bar'
ESC   exit insert mode
n     next occurrence
.     repeat previous command 
Insert 3 times "Help!": Help! Help! Help!
3i Help!_ ESC

Insert previously yanked text in line after current
oESCp

=== Search for selected text ===
__<select> y / C-r0__

<select> Select text in VISUAL mode (v)
y        Yank selection
/        Search for
C-r0     Press Ctrl-R and 0 to paste in

=== Comment out selection ===
__C-v <select> # ESC ESC__

C-v   Enter VISUAL block mode
<sel> Select lines
#     Comment char for programming language (perl, python, bash, etc)
ESC   Exit
ESC   Completes adding comment char for previous selected block

== What is the history file called? Where is it stored? ==
It is populated at startup from the .viminfo file

